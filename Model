
import numpy as np 
import scipy.io
import torch
import torchvision
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms
import torch.nn.functional as F
from SK_network import SKConv, SKUnit
from vector_quantize_pytorch import ResidualVQ, VectorQuantize

class Quantize(nn.Module):
    def __init__(self,num_embeddings, embedding_dim, commitment_cost):
        super(Quantize, self).__init__()
        
        self._embedding_dim = embedding_dim
        self._num_embeddings = num_embeddings
        
        self._embedding  = nn.Embedding(self._num_embeddings, self._embedding_dim)
        self._embedding.weight.data.uniform_(-1/self._num_embeddings, 1/self._num_embeddings)
        self._commitment_cost = commitment_cost
        
    def forward(self, inputs): 
        # convert inputs from BCHW -> BHWC
        inputs = inputs.permute(0, 2, 3, 1).contiguous()
        input_shape = inputs.shape
        
        # Flatten input
        flat_input = inputs.view(-1, self._embedding_dim)
        
        # Calculate distances
        distances = (torch.sum(flat_input**2, dim=1, keepdim=True)#16384x1 
                    + torch.sum(self._embedding.weight**2, dim=1)#1 x _num_embeddings
                    - 2 * torch.matmul(flat_input, self._embedding.weight.t()))
        # 16384 x _num_embeddings
            
        # Encoding
        encoding_indices = torch.argmin(distances, dim=1).unsqueeze(1)
        encodings = torch.zeros(encoding_indices.shape[0], self._num_embeddings, device=inputs.device)
        encodings.scatter_(1, encoding_indices, 1)
        
        # Quantize and unflatten
        quantized = torch.matmul(encodings, self._embedding.weight).view(input_shape)
        
        # Loss
        e_latent_loss = F.mse_loss(quantized, inputs)
        q_latent_loss = F.mse_loss(quantized, inputs)
        loss = q_latent_loss + self._commitment_cost * e_latent_loss
        
        quantized = inputs + (quantized - inputs) 
        avg_probs = torch.mean(encodings, dim=0)
        perplexity = torch.exp(-torch.sum(avg_probs * torch.log(avg_probs + 1e-10)))
        
        # convert quantized from BHWC -> BCHW
        return loss, quantized.permute(0, 3, 1, 2).contiguous(), perplexity, encodings

class Encoder(nn.Module):
    def __init__(self):
        super(Encoder,self).__init__()
        self.SKunit1 = SKUnit(in_features=3, mid_features=16, out_features=32, dim1 = 114,dim2 = 10,pool_dim = 'freq-chan', M=1, G=64, r=4, stride=1, L=32)
        self.SKunit2 = SKUnit(in_features=32, mid_features=64, out_features=128, dim1 = 57,dim2 = 8,pool_dim = 'freq-chan', M=1, G=64, r=4, stride=1, L=32)
        self.SKunit3 = SKUnit(in_features=128, mid_features=64, out_features=32, dim1 = 28,dim2 = 2,pool_dim = 'freq-chan', M=1, G=64, r=4, stride=1, L=32)
        self.pool_1 = nn.AvgPool2d(2)
        self.pool_2 = nn.AvgPool2d(2)
        # output size: (128,96,6,6)
    def forward(self,x):
        encoder_1_output = self.SKunit1(x)
        pool_1_output = self.pool_1(encoder_1_output)
        encoder_2_output = self.SKunit2(pool_1_output)
        encoder_output = self.pool_2(encoder_2_output)
        encoder_output = self.SKunit3(encoder_output)

        return encoder_output
    
class Discriminator(nn.Module):
  def __init__(self):
    super(Discriminator,self).__init__()
    self.SKunit1 = SKUnit(in_features=3, mid_features=16, out_features=32, dim1 = 114,dim2 = 10,pool_dim = 'freq-chan', M=1, G=64, r=4, stride=1, L=32)
    self.SKunit2 = SKUnit(in_features=32, mid_features=64, out_features=128, dim1 = 57,dim2 = 8,pool_dim = 'freq-chan', M=1, G=64, r=4, stride=1, L=32)
    self.SKunit3 = SKUnit(in_features=128, mid_features=64, out_features=32, dim1 = 28,dim2 = 2,pool_dim = 'freq-chan', M=1, G=64, r=4, stride=1, L=32)
    self.pool_1 = nn.AvgPool2d(2)
    self.pool_2 = nn.AvgPool2d(2)
    
    self.fc1=nn.Linear(32*28*2,512)
    self.bn=nn.BatchNorm1d(512,momentum=0.9)
    self.fc2=nn.Linear(512,1)
    self.sigmoid=nn.Sigmoid()
    self.relu = nn.LeakyReLU(0.2)

  def forward(self,x):
    batch = x.shape[0]
    encoder_1_output = self.SKunit1(x)
    pool_1_output = self.pool_1(encoder_1_output)
    encoder_2_output = self.SKunit2(pool_1_output)
    encoder_output = self.pool_2(encoder_2_output)
    encoder_output = self.SKunit3(encoder_output)
    x=encoder_output.view(batch,-1)
    x1=x;
    x=self.relu(self.bn(self.fc1(x)))
    x=self.sigmoid(self.fc2(x))

    return x,x1    

class regression(nn.Module):
    def __init__(self, input_dim, output_dim, hidden_dim):
        super(regression, self).__init__()
        self.fc1 = nn.Linear(input_dim, hidden_dim)
        self.fc2 = nn.Linear(hidden_dim, hidden_dim*2)
        self.fc3 = nn.Linear(hidden_dim*2, output_dim)
        self.bn = nn.BatchNorm1d(hidden_dim*2)
        self.relu = nn.ReLU()  # Hàm kích hoạt ReLU
        self.dropout = nn.Dropout(p=0.1) 
        self.gelu = nn.GELU()
    def forward(self, x):
        x = x.reshape(x.size(0), -1)
        #x= x.reshape(x.size(0), x.size(1)*x.size(2))
        
        x = self.fc1(x)
        x = self.relu(x)  # Áp dụng ReLU sau lớp fully connected thứ nhất
        x = self.dropout(x)
        x = self.fc2(x)
        x = self.bn(x)
        x = self.relu(x)  # Áp dụng ReLU sau lớp fully connected thứ hai
        x = self.dropout(x)
        output = self.fc3(x)

        return output


class Decoder(nn.Module):
    def __init__(self):
        super(Decoder, self).__init__()
        self.transposed_conv1 = nn.ConvTranspose2d(in_channels=32, out_channels=128, kernel_size=3, stride=2, padding=1, output_padding=1)
        self.transposed_conv2 = nn.ConvTranspose2d(in_channels=128, out_channels=32, kernel_size=3, stride=2, padding=1, output_padding=1)
        self.transposed_conv3 = nn.ConvTranspose2d(in_channels=32, out_channels=3, kernel_size=3, stride=2, padding=1, output_padding=1)
        self.relu = nn.ReLU()
        self.bn1 = nn.BatchNorm2d(128)
        self.bn2 = nn.BatchNorm2d(32)
        self.bn3 = nn.BatchNorm2d(3)

        self.pool = nn.AdaptiveAvgPool2d((114,10))
        #self.transposed_conv3 = nn.ConvTranspose2d(in_channels=64, out_channels=1, kernel_size=3, stride=2, padding=1, output_padding=1)

    def forward(self, x):
        x = self.transposed_conv1(x)
        x = self.bn1(x)
        x = self.relu(x)
        x = self.transposed_conv2(x)
        x = self.bn2(x)
        x = self.relu(x)
        x = self.transposed_conv3(x)
        x = self.bn3(x)
        x = self.relu(x)
        x = self.pool(x)
        
        return x
    
class CSI(nn.Module):
    def __init__(self, embedding_dim, commitment_cost):
        super(CSI,self).__init__()

        self._encoder = Encoder()
        #self._classifier = classifier()
        self._pre_vq_conv = nn.Sequential(
                                      nn.Conv2d(in_channels=32,out_channels=embedding_dim,kernel_size=1,stride=1),
                                      nn.BatchNorm2d(embedding_dim),
                                      nn.ReLU()
        )
        
        self._trans_vq_vae = nn.Sequential(
                                           nn.ConvTranspose2d(in_channels=embedding_dim, out_channels=96, kernel_size=1, stride=1),
                                           nn.BatchNorm2d(96),
                                           nn.ReLU()
        )  
        
        self.regression = regression(input_dim=embedding_dim*28*2, output_dim=34, hidden_dim=128)
        self._decoder = Decoder()
        self.vq = VectorQuantize(
                        dim = 56,
                        codebook_size = embedding_dim,     # codebook size
                        decay = 0.8,             # the exponential moving average decay, lower means the dictionary will change faster
                        commitment_weight = commitment_cost   # the weight on the commitment loss
                    )
        self.embedding_dim =embedding_dim

    def forward(self, x):
        batch = x.shape[0]
        z = self._encoder(x)
        #z = self._pre_vq_conv(z)
        z = z.view(batch,self.embedding_dim,56)
        quantized, indices, loss = self.vq(z)
        quantized = quantized.view(batch,self.embedding_dim,28,2)
        #quantized = self._trans_vq_vae(quantized)
        y_p = self.regression(quantized)
        r_x = self._decoder(quantized)
        y_p = y_p.reshape(batch,17,2)
        return loss, r_x, y_p
